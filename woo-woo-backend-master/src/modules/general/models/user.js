'use strict';
import capitalize from 'capitalize';

// define user model
const createUserModel = (sequelize, DataTypes) => {
  const User = sequelize.define(
    'User',
    {
      // this is the id generated by firebase
      uid: {
        type: DataTypes.STRING,
        unique: true,
        allowNull: false,
      },
      firstName: {
        type: DataTypes.STRING,
        validate: {
          is: /^[A-Za-z ]{2,20}$/,
          len: {
            args: [3, 15],
            msg: 'Name must be between 3 to 15 characters in length',
          },
        },
      },
      lastName: {
        is: /^[A-Za-z ]{2,20}$/,
        type: DataTypes.STRING,
        validate: {
          len: {
            args: [3, 15],
            msg: 'Name must be between 3 to 15 characters in length',
          },
        },
      },
      email: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
        validate: {
          len: {
            args: [6, 128],
            msg: 'Email address must be between 6 and 128 characters in length',
          },
          isEmail: {
            msg: 'Email address must be valid',
          },
        },
      },
      photo: DataTypes.STRING, // may need to add more validation later on
      role: {
        type: DataTypes.STRING,
        allowNull: false,
        validate: {
          fn(val) {
            if (val !== 'healer' && val !== 'client')
              throw new Error('Invalid role');
          },
        },
      },
    },
    {
      hooks: {
        beforeCreate(user) {
          user.firstName = capitalize(user.firstName);
          user.lastName = capitalize(user.lastName);
        },
      },
      indexes: [
        {
          unique: true,
          fields: ['uid'],
        },
      ],
    }
  );

  User.associate = (models) => {
    User.hasOne(models.HealerProfile, {
      as: 'account',
    });

    User.hasOne(models.Location, {
      foreignKey: 'userId',
    });

    User.hasMany(models.Appointment, {
      foreignKey: 'clientId',
      as: 'client',
    });
  };
  return User;
};

export default createUserModel;
